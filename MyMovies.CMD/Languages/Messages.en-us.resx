<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddCatalog" xml:space="preserve">
    <value>A - ADD catalog</value>
  </data>
  <data name="AddMovie" xml:space="preserve">
    <value>A - ADD movie</value>
  </data>
  <data name="CatalogAdded" xml:space="preserve">
    <value>The catalog was added successful.</value>
  </data>
  <data name="CatalogChanged" xml:space="preserve">
    <value>The catalog was changed successful.</value>
  </data>
  <data name="CatalogExist" xml:space="preserve">
    <value>The catalog is already exist.</value>
  </data>
  <data name="CatalogRemoved" xml:space="preserve">
    <value>The catalog was removed successful.</value>
  </data>
  <data name="ChangeCatalog" xml:space="preserve">
    <value>C - CHANGE catalog</value>
  </data>
  <data name="ChangeMovie" xml:space="preserve">
    <value>C - CHANGE movie</value>
  </data>
  <data name="ChooseLanguage" xml:space="preserve">
    <value>Choose the language</value>
  </data>
  <data name="ColumnNotFound" xml:space="preserve">
    <value>The column is not found</value>
  </data>
  <data name="Command" xml:space="preserve">
    <value>Command</value>
  </data>
  <data name="Commands" xml:space="preserve">
    <value>COMMANDS</value>
  </data>
  <data name="Empty" xml:space="preserve">
    <value>Empty...</value>
  </data>
  <data name="EnterCatalogName" xml:space="preserve">
    <value>Enter the name for new catalog</value>
  </data>
  <data name="EnterCatalogNameToFind" xml:space="preserve">
    <value>Enter the catalog's name to find</value>
  </data>
  <data name="EnterCatalogNumberToChange" xml:space="preserve">
    <value>Enter the catalog's number to change</value>
  </data>
  <data name="EnterCatalogNumberToOpen" xml:space="preserve">
    <value>Enter the catalog's number to open</value>
  </data>
  <data name="EnterCatalogNumberToRemove" xml:space="preserve">
    <value>Enter the catalog's number to remove</value>
  </data>
  <data name="EnterColumnNumber" xml:space="preserve">
    <value>Enter the column's number</value>
  </data>
  <data name="EnterMovieDirector" xml:space="preserve">
    <value>Enter the movie's director</value>
  </data>
  <data name="EnterMovieGenres" xml:space="preserve">
    <value>Enter the movie's genres separated by commas</value>
  </data>
  <data name="EnterMovieName" xml:space="preserve">
    <value>Enter the movie's name</value>
  </data>
  <data name="EnterMovieNameToFind" xml:space="preserve">
    <value>Enter the movie's name to find</value>
  </data>
  <data name="EnterMovieNumberToChange" xml:space="preserve">
    <value>Enter the movie's number to change</value>
  </data>
  <data name="EnterMovieNumberToOpen" xml:space="preserve">
    <value>Enter the movie's number to open</value>
  </data>
  <data name="EnterMovieNumberToRemove" xml:space="preserve">
    <value>Enter the movie's number to remove</value>
  </data>
  <data name="EnterMovieOriginalName" xml:space="preserve">
    <value>Enter the movie's original name</value>
  </data>
  <data name="EnterMovieRating" xml:space="preserve">
    <value>Enter the movie's rating (separating sign - comma)</value>
  </data>
  <data name="EnterMovieWatched" xml:space="preserve">
    <value>Enter a watched mark</value>
  </data>
  <data name="EnterMovieYear" xml:space="preserve">
    <value>Enter the movie's year</value>
  </data>
  <data name="EnterNewCatalogName" xml:space="preserve">
    <value>Enter the new name for catalog</value>
  </data>
  <data name="EnterUserName" xml:space="preserve">
    <value>Enter user's name</value>
  </data>
  <data name="EnterUserPassword" xml:space="preserve">
    <value>Enter user's password</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>ESC - EXIT to main menu</value>
  </data>
  <data name="FiltMovies" xml:space="preserve">
    <value>F - FILT movies by genre</value>
  </data>
  <data name="FindCatalogs" xml:space="preserve">
    <value>P - FIND catalogs</value>
  </data>
  <data name="FindMovies" xml:space="preserve">
    <value>P - FIND movies</value>
  </data>
  <data name="Greeting" xml:space="preserve">
    <value>Hello, It's MyMovies App!</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>language</value>
  </data>
  <data name="Movie" xml:space="preserve">
    <value>Movie</value>
  </data>
  <data name="MovieAdded" xml:space="preserve">
    <value>The movie was added to catalog successful.</value>
  </data>
  <data name="MovieChanged" xml:space="preserve">
    <value>The movie was changed successful.</value>
  </data>
  <data name="MovieDate" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="MovieDirector" xml:space="preserve">
    <value>Director</value>
  </data>
  <data name="MovieExist" xml:space="preserve">
    <value>The movie is already exist in catalog.</value>
  </data>
  <data name="MovieGenres" xml:space="preserve">
    <value>Genres</value>
  </data>
  <data name="MovieName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="MovieNumber" xml:space="preserve">
    <value>Number</value>
  </data>
  <data name="MovieOriginalName" xml:space="preserve">
    <value>OriginalName</value>
  </data>
  <data name="MovieRating" xml:space="preserve">
    <value>Rating</value>
  </data>
  <data name="MovieRemoved" xml:space="preserve">
    <value>The movie was removed successful.</value>
  </data>
  <data name="MovieWatched" xml:space="preserve">
    <value>Watched</value>
  </data>
  <data name="MovieYear" xml:space="preserve">
    <value>Year</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>no</value>
  </data>
  <data name="NotFound" xml:space="preserve">
    <value>Not found.</value>
  </data>
  <data name="OpenCatalog" xml:space="preserve">
    <value>O - OPEN catalog</value>
  </data>
  <data name="OpenMovie" xml:space="preserve">
    <value>O - OPEN movie</value>
  </data>
  <data name="PressAnyKey" xml:space="preserve">
    <value>Press any key to return to the movie list...</value>
  </data>
  <data name="RemoveCatalog" xml:space="preserve">
    <value>D - REMOVE catalog</value>
  </data>
  <data name="RemoveMovie" xml:space="preserve">
    <value>D - REMOVE movie</value>
  </data>
  <data name="SaveChanges" xml:space="preserve">
    <value>Save? Enter 'yes' to save changes, or 'no' to continue changing</value>
  </data>
  <data name="SelectRandomCatalog" xml:space="preserve">
    <value>R - SELECT RANDOM catalog</value>
  </data>
  <data name="SelectRandomMovie" xml:space="preserve">
    <value>R - SELECT RANDOM movie</value>
  </data>
  <data name="SortingByNameOrByDate" xml:space="preserve">
    <value>1 - sorting by name, 2 - sorting by date</value>
  </data>
  <data name="SortingCatalogs" xml:space="preserve">
    <value>S - SORTING catalogs</value>
  </data>
  <data name="SortingMovies" xml:space="preserve">
    <value>S - SORTING movies</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>Unknown command.</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome</value>
  </data>
  <data name="WrongCommand" xml:space="preserve">
    <value>Wrong command.</value>
  </data>
  <data name="WrongFormat" xml:space="preserve">
    <value>Wrong format.</value>
  </data>
  <data name="WrongPassword" xml:space="preserve">
    <value>Wrong password. Try again.</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>yes</value>
  </data>
</root>